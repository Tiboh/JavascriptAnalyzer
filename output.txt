<SWITCH,switch> // token Palabra reservada
<ABRPAR,> // token Abrir paréntesis
<ID,num> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<ABRLLAVE,> // token Abrir llave
<CASE,case> // token Palabra reservada
<ENTERO,1> // token Entero
<DOBLEPUNTOS,> // token Doble puntos
<IF,if> // token Palabra reservada
<ABRPAR,> // token Abrir paréntesis
<ID,num> // token Identificador
<OPRELIGUAL,> // token Operator relational igual
<ENTERO,0> // token Entero
<CERPAR,> // token Cerrar paréntesis
<ABRLLAVE,> // token Abrir llave
<CERLLAVE,> // token Cerrar llave
<CASE,case> // token Palabra reservada
<ENTERO,0> // token Entero
<DOBLEPUNTOS,> // token Doble puntos
<WRITE,write> // token Palabra reservada
<ABRPAR,> // token Abrir paréntesis
<CADENA,"El factorial de ", num, " siempre es 1.\n"> // token Cadena
<CERPAR,> // token Cerrar paréntesis
<PUNTOCOMA,> // token Punto comma
<BREAK,break> // token Palabra reservada
<DEFAULT,default> // token Palabra reservada
<DOBLEPUNTOS,> // token Doble puntos
<IF,if> // token Palabra reservada
<ABRPAR,> // token Abrir paréntesis
<ID,num> // token Identificador
<OPRELIGUAL,> // token Operator relational igual
<ENTERO,0> // token Entero
<CERPAR,> // token Cerrar paréntesis
<ABRLLAVE,> // token Abrir llave
<ID,For> // token Identificador
<OPAS,> // token Operator asignacion
<ID,FactorialFor> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,num> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<ID,While> // token Identificador
<OPAS,> // token Operator asignacion
<ID,FactorialWhile> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<CERPAR,> // token Cerrar paréntesis
<ID,Do> // token Identificador
<OPAS,> // token Operator asignacion
<ID,FactorialDo> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,num> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<ID,imprime> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,cadena> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,false> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<COMA,> // token Comma
<CADENA,"recursivo es: "> // token Cadena
<COMA,> // token Comma
<ID,FactorialRecursivo> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,num> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<CERPAR,> // token Cerrar paréntesis
<ID,imprime> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,s> // token Identificador
<COMA,> // token Comma
<CADENA,"con do-while es: "> // token Cadena
<COMA,> // token Comma
<ID,Do> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<ID,imprime> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,s> // token Identificador
<COMA,> // token Comma
<CADENA,"con while es: "> // token Cadena
<COMA,> // token Comma
<ID,While> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<ID,imprime> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,cadena> // token Identificador
<ABRPAR,> // token Abrir paréntesis
<ID,false> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<COMA,> // token Comma
<CADENA,"con for es: "> // token Cadena
<COMA,> // token Comma
<ID,For> // token Identificador
<CERPAR,> // token Cerrar paréntesis
<CERLLAVE,> // token Cerrar llave
<CERLLAVE,> // token Cerrar llave
